import { FirewallData } from "@/types/firewall";

// Type for new firewall rule (no id, generated by backend)
export type NewFirewallRule = {
  name: string;
  src: string;
  dest: string;
  proto: string;
  target: string;
  enabled: boolean;
};

export const firewallApi = {
  getFirewall: async (): Promise<FirewallData> => {
    console.log("getFirewall Request");
    const response = await fetch("/cgi-bin/firewall.cgi", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log("getFirewall Response", data);

    if (!data.rules || !Array.isArray(data.rules)) {
      throw new Error("Invalid firewall data: rules missing or not an array");
    }

    return data as FirewallData;
  },

  updateFirewall: async (payload: {
    rules?: Array<FirewallData["rules"][0] | NewFirewallRule>;
    enabled?: boolean;
    action?: "add";
  }): Promise<{ status: string; message: string }> => {
    console.log("updateFirewall Request", payload);
    const response = await fetch("/cgi-bin/firewall.cgi", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log("updateFirewall Response", data);

    return data as { status: string; message: string };
  },
};